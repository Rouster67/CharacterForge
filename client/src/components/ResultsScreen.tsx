import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import type { StatResult } from '@shared/schema';
import { STAT_CONFIG } from '@/lib/statCalculator';

interface ResultsScreenProps {
  results: StatResult[];
  totalCost: number;
  onRetakeQuiz: () => void;
}

export function ResultsScreen({ results, totalCost, onRetakeQuiz }: ResultsScreenProps) {
  const [showAlgorithm, setShowAlgorithm] = useState(false);

  const exportStats = () => {
    const statsText = results.map(stat => 
      `${STAT_CONFIG[stat.name].fullName}: ${stat.finalScore} (${stat.wins} choices, ${stat.percentage}%, ${stat.cost} points)`
    ).join('\n');
    
    const exportData = `D&D Character Stats\n\n${statsText}\n\nTotal Cost: ${totalCost}/27 points\nGenerated by D&D Stat Generator`;
    
    const blob = new Blob([exportData], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'dnd-stats.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const getStatColorClasses = (color: string) => {
    const colorMap = {
      red: 'bg-red-500 text-red-400',
      green: 'bg-green-500 text-green-400',
      orange: 'bg-orange-500 text-orange-400',
      blue: 'bg-blue-500 text-blue-400',
      purple: 'bg-purple-500 text-purple-400',
      pink: 'bg-pink-500 text-pink-400'
    };
    return colorMap[color as keyof typeof colorMap] || 'bg-gray-500 text-gray-400';
  };

  return (
    <div className="container mx-auto px-4 py-8 max-w-4xl">
      <div className="text-center mb-8">
        <div className="inline-flex items-center justify-center w-16 h-16 bg-green-500 rounded-full mb-4">
          <i className="fas fa-check text-2xl text-white"></i>
        </div>
        <h1 className="text-3xl md:text-4xl font-bold mb-3">Your Personalized Stats</h1>
        <p className="text-slate-300 text-lg">Based on your 90 comparative choices</p>
      </div>

      {/* Final Stats Display */}
      <div className="grid md:grid-cols-3 gap-4 mb-8">
        {results.map((stat) => {
          const config = STAT_CONFIG[stat.name];
          const colorClasses = getStatColorClasses(stat.color);
          const [bgColor, textColor] = colorClasses.split(' ');
          
          return (
            <Card key={stat.name} className="bg-dnd-surface p-6 border border-slate-700 text-center">
              <div className={`w-12 h-12 mx-auto mb-3 ${bgColor} rounded-full flex items-center justify-center`}>
                <i className={`fas ${config.icon} text-white`}></i>
              </div>
              <h3 className="text-lg font-semibold mb-1">{config.fullName}</h3>
              <div className={`text-3xl font-bold ${textColor} mb-2`}>{stat.finalScore}</div>
              <div className="text-sm text-slate-400">
                {stat.wins} choices • {stat.percentage}%
              </div>
              <div className="text-xs text-slate-500 mt-2">Cost: {stat.cost} points</div>
            </Card>
          );
        })}
      </div>

      {/* Validation Summary */}
      <Card className="bg-green-900/20 border border-green-700 p-4 mb-6">
        <div className="flex items-center text-green-400">
          <i className="fas fa-check-circle mr-2"></i>
          <span className="font-medium">Valid D&D Point-Buy Array</span>
        </div>
        <p className="text-green-300 text-sm mt-1">
          Total Cost: {totalCost}/27 points • All stats within legal range (6-16)
        </p>
      </Card>

      {/* Action Buttons */}
      <div className="flex flex-col sm:flex-row gap-4 justify-center mb-8">
        <Button 
          onClick={onRetakeQuiz}
          variant="secondary"
          className="bg-slate-700 hover:bg-slate-600"
        >
          <i className="fas fa-redo mr-2"></i>
          Retake Quiz
        </Button>
        <Button 
          onClick={exportStats}
          className="bg-dnd-primary hover:bg-dnd-primary/90"
        >
          <i className="fas fa-download mr-2"></i>
          Export Stats
        </Button>
        <Button 
          onClick={() => setShowAlgorithm(!showAlgorithm)}
          className="bg-dnd-secondary hover:bg-dnd-secondary/90"
        >
          <i className="fas fa-code mr-2"></i>
          View Algorithm
        </Button>
      </div>

      {/* Algorithm Explanation */}
      {showAlgorithm && (
        <Card className="bg-dnd-surface p-6 border border-slate-700">
          <h3 className="text-xl font-semibold mb-4 flex items-center">
            <i className="fas fa-cogs text-dnd-primary mr-2"></i>
            How The Algorithm Works
          </h3>
          <div className="space-y-4 text-slate-300">
            <div className="grid md:grid-cols-2 gap-6">
              <div>
                <h4 className="font-medium text-white mb-2">1. Question Generation</h4>
                <p className="text-sm">90 questions covering all 15 unique stat pairings (STR vs DEX, STR vs CON, etc.), with 6 questions per pairing to ensure balanced representation.</p>
              </div>
              <div>
                <h4 className="font-medium text-white mb-2">2. Point Distribution</h4>
                <p className="text-sm">Each choice awards 1 point to the selected stat. Final win counts are converted to percentages and multiplied by 27 (standard point-buy budget).</p>
              </div>
              <div>
                <h4 className="font-medium text-white mb-2">3. Initial Mapping</h4>
                <p className="text-sm">Raw point costs are mapped to stat scores using D&D's official point-buy cost table (6=-2, 7=-1, 8=0, ..., 16=12).</p>
              </div>
              <div>
                <h4 className="font-medium text-white mb-2">4. Greedy Adjustment</h4>
                <p className="text-sm">A balancing algorithm fine-tunes scores up or down until the total cost equals exactly 27 points, maintaining legal ranges.</p>
              </div>
            </div>
            <Card className="p-4 bg-slate-800">
              <h5 className="font-medium text-white mb-2">Point-Buy Cost Table</h5>
              <div className="grid grid-cols-6 gap-2 text-xs text-center">
                <div><strong>Score:</strong></div>
                <div><strong>Cost:</strong></div>
                <div><strong>Score:</strong></div>
                <div><strong>Cost:</strong></div>
                <div><strong>Score:</strong></div>
                <div><strong>Cost:</strong></div>
                
                <div>6: -2</div>
                <div>7: -1</div>
                <div>8: 0</div>
                <div>9: 1</div>
                <div>10: 2</div>
                <div>11: 3</div>
                
                <div>12: 4</div>
                <div>13: 5</div>
                <div>14: 7</div>
                <div>15: 9</div>
                <div>16: 12</div>
                <div></div>
              </div>
            </Card>
          </div>
        </Card>
      )}
    </div>
  );
}
